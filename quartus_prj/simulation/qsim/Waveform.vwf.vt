// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/30/2023 08:36:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          serializer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module serializer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_i;
reg [15:0] data_i;
reg [3:0] data_mod_i;
// wires                                               

// assign statements (if any)                          
serializer i1 (
// port map - connection between master ports and signals/registers   
	.clk_i(clk_i),
	.data_i(data_i),
	.data_mod_i(data_mod_i)
);
initial 
begin 
#1000000 $finish;
end 

// clk_i
initial
begin
	repeat(98)
	begin
		clk_i = 1'b0;
		clk_i = #5000 1'b1;
		# 5000;
	end
	clk_i = 1'b0;
end 
// data_i[ 15 ]
initial
begin
	data_i[15] = 1'b1;
	data_i[15] = #580000 1'b0;
end 
// data_i[ 14 ]
initial
begin
	data_i[14] = 1'b0;
end 
// data_i[ 13 ]
initial
begin
	data_i[13] = 1'b1;
	data_i[13] = #580000 1'b0;
end 
// data_i[ 12 ]
initial
begin
	data_i[12] = 1'b0;
end 
// data_i[ 11 ]
initial
begin
	data_i[11] = 1'b1;
	data_i[11] = #580000 1'b0;
end 
// data_i[ 10 ]
initial
begin
	data_i[10] = 1'b0;
end 
// data_i[ 9 ]
initial
begin
	data_i[9] = 1'b1;
	data_i[9] = #580000 1'b0;
end 
// data_i[ 8 ]
initial
begin
	data_i[8] = 1'b0;
end 
// data_i[ 7 ]
initial
begin
	data_i[7] = 1'b1;
	data_i[7] = #580000 1'b0;
end 
// data_i[ 6 ]
initial
begin
	data_i[6] = 1'b0;
end 
// data_i[ 5 ]
initial
begin
	data_i[5] = 1'b1;
	data_i[5] = #580000 1'b0;
end 
// data_i[ 4 ]
initial
begin
	data_i[4] = 1'b0;
end 
// data_i[ 3 ]
initial
begin
	data_i[3] = 1'b1;
	data_i[3] = #580000 1'b0;
end 
// data_i[ 2 ]
initial
begin
	data_i[2] = 1'b0;
end 
// data_i[ 1 ]
initial
begin
	data_i[1] = 1'b1;
	data_i[1] = #580000 1'b0;
end 
// data_i[ 0 ]
initial
begin
	data_i[0] = 1'b0;
end 
// data_mod_i[ 3 ]
initial
begin
	data_mod_i[3] = 1'b0;
end 
// data_mod_i[ 2 ]
initial
begin
	data_mod_i[2] = 1'b0;
end 
// data_mod_i[ 1 ]
initial
begin
	data_mod_i[1] = 1'b0;
end 
// data_mod_i[ 0 ]
initial
begin
	data_mod_i[0] = 1'b0;
end 

// data_val_i
initial
begin
	data_val_i = 1'b0;
	data_val_i = #90000 1'b1;
	data_val_i = #20000 1'b0;
end 

// srst_i
initial
begin
	srst_i = 1'b0;
end 
endmodule

